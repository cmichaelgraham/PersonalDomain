//Generated by Flashman\James Chadwick at 9/26/2015 12:59 AM
import {HttpClient} from 'aurelia-http-client';
import {CoreDataService} from 'core/data-service';

export class AuthenticationDataService extends CoreDataService {
    static inject = [HttpClient];
    constructor(_httpClient: HttpClient) {
        super("http://authentication.jamespchadwick.com", _httpClient);;
    }

    public DeleteRefreshToken(jsonRequest: AuthenticationAPI.Application.Owin.Operations.Request.ByIdRequest): Promise<AuthenticationAPI.Application.Owin.Operations.Response.OperationResponse> {
        return this.Post('/api/DeleteRefreshToken', jsonRequest);
    }
    
    public RegisterExternalUser(jsonRequest: AuthenticationAPI.Application.Models.RegisterExternalUserDTO): Promise<AuthenticationAPI.Application.Owin.Operations.Response.RegisterExternalUserResponse> {
        return this.Post('/api/RegisterExternalUser', jsonRequest);
    }

    public RegisterUser(jsonRequest: AuthenticationAPI.Application.Models.RegisterUserDTO): Promise<AuthenticationAPI.Application.Owin.Operations.Response.OperationResponse> {
        return this.Post('/api/RegisterUser', jsonRequest);
    }    

    public GetBearerToken(jsonRequest: AuthenticationAPI.Application.Owin.Operations.Request.GetBearerTokenRequest): Promise<AuthenticationAPI.Application.Models.BearerTokenDTO> {
        return this.Post('/api/GetBearerToken', jsonRequest);
    }    

    public GetExternalLogin(jsonRequest: AuthenticationAPI.Application.Owin.Operations.Request.GetExternalLoginRequest): Promise<AuthenticationAPI.Application.Owin.Operations.Response.ExternalLoginResponse> {
        return this.Post('/api/GetExternalLogin', jsonRequest);
    }    

    public GetRefreshTokens(jsonRequest: AuthenticationAPI.Application.Owin.Operations.Request.NullRequest): Promise<AuthenticationAPI.Application.Models.RefreshTokenDTO[]> {
        return this.Post('/api/GetRefreshTokens', jsonRequest);
    }  	
    
    public GetToken(jsonRequest: AuthenticationAPI.Application.Owin.Operations.Request.GetTokenRequest): Promise<string> {
        var post = (<any>this.HttpClient).createRequest(this.BaseUrl + '/token')
                                         .withHeader("Content-Type", "application/x-www-form-urlencoded")
                                         .withContent("grant_type=password&username=" + jsonRequest.UserName + "&password=" + jsonRequest.Password)
                                         .asPost(); 
                                          
        return post.send().then((httpResponse) => { return httpResponse.response; });
    }
}